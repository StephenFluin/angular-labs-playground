load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@io_bazel_rules_sass//:defs.bzl", "sass_binary")
load("@npm//@babel/cli:index.bzl", "babel")
load("@npm//history-server:index.bzl", "history_server")
load("@npm//history-server:index.bzl", "history_server")
load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
load("@npm_angular_bazel//:index.bzl", "ng_module")
load("@npm_bazel_rollup//:index.bzl", "rollup_bundle")
load("@npm_bazel_terser//:index.bzl", "terser_minified")
load("@npm_bazel_typescript//:index.bzl", "ts_config", "ts_devserver", "ts_library")

package(default_visibility = ["//:__subpackages__"])

sass_binary(
    name = "index_styles",
    src = "index.scss",
    deps = ["//src/demos/aio-modern/styles"]
)


# Files that we serve in both development and production
_ASSETS = [

    # "@npm//:node_modules/@angular/material/prebuilt-themes/deeppurple-amber.css",
    # "@npm//:node_modules/zone.js/dist/zone.min.js",
]

# rollup_bundle(
#     name = "host-bundle",
#     config_file = "rollup.config.js",
#     entry_points = {
#         "//src/demos/embedded/host-app:host-app.ts": "host-app",
#     },
#     output_dir = True,
#     deps = [
#         "//src/demos/embedded/host-app",
#         "@npm//rollup-plugin-commonjs",
#         "@npm//rollup-plugin-node-resolve",
#     ],
# )

# babel(
#     name = "bundle-es5",
#     args = [
#         "$(execpath :bundle-es2015)",
#         "--no-babelrc",
#         "--source-maps",
#         "--presets=@babel/preset-env",
#         "--out-dir",
#         "$(@D)",
#     ],
#     data = [
#         ":bundle-es2015",
#         "@npm//@babel/preset-env",
#     ],
#     output_dir = True,
# )

# terser_minified(
#     name = "bundle-es2015.min",
#     src = ":bundle-es2015",
# )

# terser_minified(
#     name = "bundle-es5.min",
#     src = ":bundle-es5",
# )

html_insert_assets(
    name = "inject_scripts_for_prod",
    # we can't output "src/example/index.html" since that collides with the devmode file.
    # pkg_web rule will re-root paths that start with _{name} by default
    # so we output "_prodapp/src/example/index.html" so that it is mapped to
    # `example/index.html` in the web package.
    outs = ["_prodapp/src/demos/aio-modern/index.html"],
    args = [
        "--html=$(execpath //src/demos/aio-modern:index.ng.html)",
        "--out=$@",
        "--roots=. $(RULEDIR)",
        "--assets",
    ] + ["$(execpath %s)" % s for s in _ASSETS],
    data = ["//src/demos/aio-modern:index.ng.html"] + _ASSETS,
)

pkg_web(
    name = "prodapp",
    srcs = [
      ":inject_scripts_for_prod",
        # ":host-bundle",
		   "//src/demos/aio-modern:index_styles",
	# 	"//src/demos/embedded/embedded-app:bundle",
        #"//src/assets",
        # Include polyfills that will be requested by old browsers
        #"@npm//:node_modules/systemjs/dist/system.js",
        #"@npm//:node_modules/core-js/client/core.min.js",
        #"index.html",
    ],
    # In production mode we serve some polyfills with script tags that have hard-coded paths in the index.html
    # so we must serve them at that path, by stripping a prefix
    additional_root_paths = [
        "npm/node_modules/core-js/client",
        "npm/node_modules/systemjs/dist",
    ],
)

history_server(
    name = "prodserver",
    data = [":prodapp"],
    # '-a src/prodapp' will ask history-server to scan for all apps under the
    # given folder this will result in the following auto-configuration:
    #   /example => src/prodapp/example
    #   /        => src/prodapp
    templated_args = [

        "src/demos/aio-modern/prodapp",
    ],
)

nodejs_image(
    name = "nodejs_image",
    data = [":prodapp"],
    entry_point = "@npm//:node_modules/history-server/modules/cli.js",
    node_modules = "@npm//:node_modules",
    # Actions created by this rule are I/O-bound,
    # so there is no benefit to running them remotely
    tags = ["local"],
    templated_args = ["src/prodapp"],
)

container_image(
    name = "image",
    base = ":nodejs_image",
    # Actions created by this rule are I/O-bound,
    # so there is no benefit to running them remotely
    tags = ["local"],
    workdir = "/app/src/nodejs_image.binary.runfiles/examples_angular",
)
